{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IngredientRow","type","className","value","this","props","name","onChange","event","target","unit","quantity","result","React","Component","IngredientsTable","i","key","rows","ingredients","forEach","ingredient","push","ScaleFactor","buttonTag","isMulti","onClick","factor","Main","state","slice","console","log","setState","sValue","toString","parseFloat","Number","isNaN","ingredientList","tempName","tempUnit","tempQuantity","tempResult","length","newIngredient","isDiferent","addEmptyIngredient","splice","handleInput","handleClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f21f5ec.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass IngredientRow extends React.Component {\n  //const [title, setTitle] = useState('' )\n\n\n\n  render() {\n    return (\n      <tr>\n        <td><input type=\"text\" className=\"name-input\" value={this.props.name} onChange={event => this.props.onChange(event.target.value, 'N')}  ></input></td>\n        <td><input type=\"text\" className=\"mesure-input\" value={this.props.unit} onChange={event => this.props.onChange(event.target.value, 'U')}></input></td>\n        <td><input type=\"number\" className=\"quant-input\" value={this.props.quantity} onChange={event => this.props.onChange(event.target.value, 'Q')}></input></td>\n        <td><input type=\"number\" className=\"result-input\" value={this.props.result} onChange={event => this.props.onChange(event.target.value, 'R')}></input></td>\n      </tr >\n\n    );\n  }\n}\n\nclass IngredientsTable extends React.Component {\n\n  renderEmptyRow(i) {\n    return (\n      <IngredientRow\n        key={i}\n        name=\"\"\n        unit=\"\"\n        quantity=\"\"\n        result=\"\"\n        onChange={(value, type) => this.props.onChange(i, value, type)}\n      />\n    );\n  }\n  render() {\n\n    const rows = [];\n\n\n    this.props.ingredients.forEach((ingredient, i) => {\n\n      rows.push(\n        <IngredientRow\n          key={i}\n          name={ingredient.name}\n          unit={ingredient.unit}\n          quantity={ingredient.quantity}\n          result={ingredient.result}\n          onChange={(value, type) => this.props.onChange(i, value, type)}\n        />\n      )\n    })\n\n\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Ingredient</th>\n              <th>Unit</th>\n              <th>Quantity</th>\n              <th>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n            {/* {this.renderEmptyRow(this.props.ingredients.length)} */}\n          </tbody>\n        </table>\n      </div>\n    );\n\n  }\n}\n\nclass ScaleFactor extends React.Component {\n  render() {\n\n    let buttonTag = this.props.isMulti ? \"X\" : \"/\"\n    return (\n      <div className=\"scale-factor-board\">\n        <h2>Ingredients</h2>\n        <button onClick={() => { this.props.onClick() }}>{buttonTag}</button>\n        <form>\n          <input type=\"number\" value={this.props.factor} onChange={event => this.props.onChange(event.target.value)} />\n        </form>\n      </div>\n    );\n\n  }\n}\n\n\n\nclass Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ingredients: [],\n      factor: 2,\n      isMulti: true\n    };\n  }\n\n\n  handleClick() {\n    const ingredientList = this.state.ingredients.slice()\n    ingredientList.forEach((ingredient, i) => {\n      if (ingredient.quantity !== \"\") {\n        if (ingredient.quantity === 0) { ingredient.result = 0 }\n        else {\n          ingredient.result = this.state.isMulti ?\n            (ingredient.quantity / this.state.factor) :\n            (ingredient.quantity * this.state.factor);\n        }\n\n      }\n\n    });\n    console.log(\"test\")\n    this.setState({\n      ingredients: this.state.ingredients,\n      factor: this.state.factor,\n      isMulti: !this.state.isMulti\n    })\n\n\n  }\n\n  handleInput(i, value, type) {\n    if (type === 'F' || type === 'Q' || type === 'R') {\n      let sValue = value.toString();\n      value = parseFloat(sValue);\n      if (Number.isNaN(value)) { value = 0 }\n    }\n    if (type === 'F') {\n\n      const ingredientList = this.state.ingredients.slice()\n      let factor = value\n      ingredientList.forEach((ingredient, i) => {\n        if (ingredient.quantity !== \"\") {\n          if (ingredient.quantity === 0) { ingredient.result = 0 }\n          else {\n            ingredient.result = this.state.isMulti ?\n              (ingredient.quantity * factor) :\n              (ingredient.quantity / factor);\n          }\n        }\n      })\n      this.setState({\n        ingredients: ingredientList,\n        factor: factor,\n        isMulti: this.state.isMulti\n      })\n    } else {\n      let tempName = \"\";\n      let tempUnit = \"\";\n      let tempQuantity = 0;\n      let tempResult = 0;\n      if (type === 'N') { tempName += value; }\n      if (type === 'U') { tempUnit += value; }\n      if (type === 'Q') {\n        tempQuantity += parseFloat(value);\n        tempResult = this.state.isMulti ?\n          (tempResult = ((value) * (this.state.factor))) :\n          (tempResult = ((value) / (this.state.factor)))\n      }\n      if (type === 'R') {\n        tempResult += parseFloat(value);\n        tempQuantity = this.state.isMulti ?\n          ((value) / (this.state.factor)) :\n          ((value) * (this.state.factor))\n      }\n      // if the item is new\n      if (i >= this.state.ingredients.length) {\n        const ingredientList = this.state.ingredients.slice();\n        const newIngredient = {\n          name: tempName,\n          unit: tempUnit,\n          quantity: tempQuantity,\n          result: tempResult\n        };\n        ingredientList.push(newIngredient);\n        this.setState({\n          ingredients: ingredientList,\n          factor: this.state.factor,\n          isMulti: this.state.isMulti\n        });\n      }\n      // if the item already exists\n      else {\n\n        let isDiferent = false;\n        if (type === 'N') { if (value !== this.state.ingredients[i].name) isDiferent = true };\n        if (type === 'U') { if (value !== this.state.ingredients[i].unit) isDiferent = true };\n        if (type === 'Q') { if (value !== this.state.ingredients[i].quantity) isDiferent = true };\n        if (type === 'R') { if (value !== this.state.ingredients[i].result) isDiferent = true };\n\n        if (isDiferent) {\n          const ingredientList = this.state.ingredients.slice();\n          let factor = this.state.factor;\n\n\n          if (type === 'N') { ingredientList[i].name = (value) };\n          if (type === 'U') { ingredientList[i].unit = (value) };\n          if (type === 'Q') { ingredientList[i].quantity = parseFloat(value); ingredientList[i].result = this.state.isMulti ? (value) * (this.state.factor) : (value) / (this.state.factor) };\n          if (type === 'R') {\n            factor = value / ingredientList[i].quantity;\n            ingredientList.forEach((ingredient, i) => {\n              if (ingredient.quantity !== \"\") {\n                if (ingredient.quantity === 0) { ingredient.result = 0 }\n                else {\n                  ingredient.result = this.state.isMulti ?\n                    ingredient.quantity * factor :\n                    ingredient.quantity / factor;\n                }\n              }\n            })\n          };\n\n          this.setState({\n            ingredients: ingredientList,\n            factor: factor,\n            isMulti: this.state.isMulti\n          })\n\n        }\n      }\n    }\n  }\n\n  addEmptyIngredient() {\n    // const ingredientList = this.state.ingredients.slice();\n    const newIngredient = {\n      name: \"\",\n      unit: \"\",\n      quantity: \"\",\n      result: \"\"\n    };\n    this.state.ingredients.push(newIngredient);\n    // this.setState({\n    //   ingredients: ingredientList,\n    //   factor: this.state.factor,\n    //   isMulti: this.state.isMulti\n    // });\n  }\n\n  render() {\n    if (!(this.state.ingredients.length > 0)) {\n      this.addEmptyIngredient();\n    } else if (\n      this.state.ingredients[this.state.ingredients.length - 1].name !== \"\" ||\n      this.state.ingredients[this.state.ingredients.length - 1].unit !== \"\" ||\n      this.state.ingredients[this.state.ingredients.length - 1].quantity !== \"\" ||\n      this.state.ingredients[this.state.ingredients.length - 1].result !== \"\") {\n      this.addEmptyIngredient();\n    }\n    for (let i = 0; i < this.state.ingredients.length - 1; i++) {\n      if (this.state.ingredients[i].name === \"\" &&\n        this.state.ingredients[i].unit === \"\" &&\n        this.state.ingredients[i].quantity === \"\" &&\n        this.state.ingredients[i].result === \"\") {\n        this.state.ingredients.splice(i, 1)\n      }\n    }\n\n\n\n\n\n\n    return (\n      <div className=\"main-board\" >\n        <div className=\"scale-factor-board-div\">\n          <ScaleFactor\n            isMulti={this.state.isMulti}\n            factor={this.state.factor}\n            onChange={(value) => this.handleInput(0, value, 'F')}\n            onClick={() => this.handleClick()} />\n        </div>\n        <div className=\"ingredients-board\">\n          <IngredientsTable\n            ingredients={this.state.ingredients}\n            onChange={(i, value, type) => this.handleInput(i, value, type)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}